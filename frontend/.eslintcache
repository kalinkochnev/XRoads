[{"/home/kalin/Coding/XRoads/frontend/src/index.js":"1","/home/kalin/Coding/XRoads/frontend/src/App.js":"2","/home/kalin/Coding/XRoads/frontend/src/serviceWorker.js":"3","/home/kalin/Coding/XRoads/frontend/src/service/State.jsx":"4","/home/kalin/Coding/XRoads/frontend/src/screens/Root.jsx":"5","/home/kalin/Coding/XRoads/frontend/src/service/User.jsx":"6","/home/kalin/Coding/XRoads/frontend/src/screens/Generic/NotFound.jsx":"7","/home/kalin/Coding/XRoads/frontend/src/screens/Generic/Error.jsx":"8","/home/kalin/Coding/XRoads/frontend/src/screens/Club/Routes.jsx":"9","/home/kalin/Coding/XRoads/frontend/src/screens/Generic/HelpRoutes.jsx":"10","/home/kalin/Coding/XRoads/frontend/src/screens/Club/Browser.jsx":"11","/home/kalin/Coding/XRoads/frontend/src/screens/Club/Edit.jsx":"12","/home/kalin/Coding/XRoads/frontend/src/screens/Club/Page.jsx":"13","/home/kalin/Coding/XRoads/frontend/src/components/Help/Navigation.jsx":"14","/home/kalin/Coding/XRoads/frontend/src/components/Help/Help.jsx":"15","/home/kalin/Coding/XRoads/frontend/src/components/Club/Edit/ClubCode.jsx":"16","/home/kalin/Coding/XRoads/frontend/src/service/xroads-api.js":"17","/home/kalin/Coding/XRoads/frontend/src/components/Club/Edit/Edit.jsx":"18","/home/kalin/Coding/XRoads/frontend/src/components/Club/Card/Card.jsx":"19","/home/kalin/Coding/XRoads/frontend/src/screens/Routes/utils.jsx":"20","/home/kalin/Coding/XRoads/frontend/src/components/Club/Featured/Featured.jsx":"21","/home/kalin/Coding/XRoads/frontend/src/components/Club/Meeting/Meetings.jsx":"22","/home/kalin/Coding/XRoads/frontend/src/components/Club/Body/Body.jsx":"23","/home/kalin/Coding/XRoads/frontend/src/components/Common/Search/Search.jsx":"24","/home/kalin/Coding/XRoads/frontend/src/components/Common/Tabs/Tabs.jsx":"25","/home/kalin/Coding/XRoads/frontend/src/components/Common/Navbar/Navbar.jsx":"26","/home/kalin/Coding/XRoads/frontend/src/components/Common/Slides/Slides.jsx":"27","/home/kalin/Coding/XRoads/frontend/src/components/Common/StickyCard/StickyCard.jsx":"28","/home/kalin/Coding/XRoads/frontend/src/components/Club/Meeting/utils.js":"29","/home/kalin/Coding/XRoads/frontend/src/components/Common/Form/DynamicForm.jsx":"30","/home/kalin/Coding/XRoads/frontend/src/components/Common/RichEditor/RichEditor.jsx":"31","/home/kalin/Coding/XRoads/frontend/src/components/Common/AlertBar/AlertBar.jsx":"32"},{"size":503,"mtime":1610239831592,"results":"33","hashOfConfig":"34"},{"size":242,"mtime":1610239831588,"results":"35","hashOfConfig":"34"},{"size":5086,"mtime":1610239831592,"results":"36","hashOfConfig":"34"},{"size":990,"mtime":1610241166710,"results":"37","hashOfConfig":"34"},{"size":653,"mtime":1610245782883,"results":"38","hashOfConfig":"34"},{"size":485,"mtime":1610241166710,"results":"39","hashOfConfig":"34"},{"size":211,"mtime":1610239831592,"results":"40","hashOfConfig":"34"},{"size":174,"mtime":1610239831592,"results":"41","hashOfConfig":"34"},{"size":1458,"mtime":1610764848854,"results":"42","hashOfConfig":"34"},{"size":558,"mtime":1610241166710,"results":"43","hashOfConfig":"34"},{"size":3873,"mtime":1610764848854,"results":"44","hashOfConfig":"34"},{"size":2158,"mtime":1610764684612,"results":"45","hashOfConfig":"34"},{"size":1715,"mtime":1610764848854,"results":"46","hashOfConfig":"34"},{"size":402,"mtime":1610241166710,"results":"47","hashOfConfig":"34"},{"size":3587,"mtime":1610241166710,"results":"48","hashOfConfig":"34"},{"size":2505,"mtime":1610241166706,"results":"49","hashOfConfig":"34"},{"size":2619,"mtime":1610680768823,"results":"50","hashOfConfig":"34"},{"size":5033,"mtime":1610241166706,"results":"51","hashOfConfig":"34"},{"size":623,"mtime":1610761509370,"results":"52","hashOfConfig":"34"},{"size":475,"mtime":1610241166710,"results":"53","hashOfConfig":"34"},{"size":2143,"mtime":1610761509370,"results":"54","hashOfConfig":"34"},{"size":9149,"mtime":1610680922079,"results":"55","hashOfConfig":"34"},{"size":766,"mtime":1610241166706,"results":"56","hashOfConfig":"34"},{"size":2104,"mtime":1610761509374,"results":"57","hashOfConfig":"34"},{"size":2522,"mtime":1610239831592,"results":"58","hashOfConfig":"34"},{"size":825,"mtime":1610241166706,"results":"59","hashOfConfig":"34"},{"size":1955,"mtime":1610761509374,"results":"60","hashOfConfig":"34"},{"size":320,"mtime":1610761509374,"results":"61","hashOfConfig":"34"},{"size":1053,"mtime":1610241166706,"results":"62","hashOfConfig":"34"},{"size":8401,"mtime":1610241166706,"results":"63","hashOfConfig":"34"},{"size":5879,"mtime":1610241166710,"results":"64","hashOfConfig":"34"},{"size":1353,"mtime":1610239831588,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1ipbra2",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"68"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"68"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"68"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"/home/kalin/Coding/XRoads/frontend/src/index.js",[],["150","151"],"/home/kalin/Coding/XRoads/frontend/src/App.js",[],"/home/kalin/Coding/XRoads/frontend/src/serviceWorker.js",[],"/home/kalin/Coding/XRoads/frontend/src/service/State.jsx",["152","153"],"import React, { createContext, useContext, useEffect, useReducer, useState } from 'react';\nimport { userReducer } from './User';\nimport { Cookies } from 'react-cookie'\n\nexport const StateContext = createContext();\nexport const StateProvider = ({ reducer, initialState, children }) => {\n    let [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <StateContext.Provider value={[state, dispatch]}>\n            {children}\n        </StateContext.Provider>\n    );\n}\n\nexport const useStateValue = () => useContext(StateContext);\n\nconst AppState = ({children}) => {\n    \n    let initialState = {\n        user: {\n            school: null,\n            email: new Cookies().get('email')\n        }\n    };\n\n    const mainReducer = ({user}, action) => ({\n        user: userReducer(user, action),\n    });\n\n    \n    return (\n        <StateProvider initialState={initialState} reducer={mainReducer}>\n            {children}\n        </StateProvider>\n    );\n}\n\nexport default AppState;","/home/kalin/Coding/XRoads/frontend/src/screens/Root.jsx",[],"/home/kalin/Coding/XRoads/frontend/src/service/User.jsx",[],"/home/kalin/Coding/XRoads/frontend/src/screens/Generic/NotFound.jsx",["154"],"import React from \"react\";\nimport { Cookies } from \"react-cookie\";\n\n\nconst ScreenNotFound = () => {\n  return (\n    <div>\n      <h1>this page was not found </h1>\n    </div>\n  );\n};\nexport default ScreenNotFound;\n","/home/kalin/Coding/XRoads/frontend/src/screens/Generic/Error.jsx",[],"/home/kalin/Coding/XRoads/frontend/src/screens/Club/Routes.jsx",["155","156","157"],"/home/kalin/Coding/XRoads/frontend/src/screens/Generic/HelpRoutes.jsx",["158","159"],"import React, { useEffect } from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { SlideHelp } from '../../components/Help/Help';\nimport HelpNavigation from '../../components/Help/Navigation';\n\n\nconst HelpRoutes = ({ match: { params: { schoolId } } }) => {\n    let { path, url } = useRouteMatch();\n\n    return (\n        <Switch>\n            <Route exact path={path} component={HelpNavigation} />\n            <Route exact path={`${path}/slides/`} component={SlideHelp} />\n        </Switch>\n    );\n}\n\nexport default HelpRoutes;","/home/kalin/Coding/XRoads/frontend/src/screens/Club/Browser.jsx",["160","161","162","163","164","165","166","167","168","169","170","171"],"import React, { useContext, useEffect, useState } from \"react\";\n\nimport Navbar from \"../../components/Common/Navbar/Navbar\";\nimport SearchBar from \"../../components/Common/Search/Search\";\nimport ClubCard from \"../../components/Club/Card/Card\";\n\nimport * as XroadsAPI from \"../../service/xroads-api\";\nimport { useStateValue } from \"../../service/State\";\nimport { Route, Switch, useHistory, useRouteMatch } from \"react-router-dom\";\nimport checkURLParams from \"../Routes/utils\";\nimport ScreenClubDetail from \"./Page\";\nimport FeaturedCard from \"../../components/Club/Featured/Featured\";\n\nconst ScreenClubBrowser = ({ match: { params } }) => {\n  let history = useHistory();\n\n  checkURLParams(params, { schoolId: \"number\" }, history);\n\n  const [school, setSchool] = useState({})\n  const [displayedClubs, setDisplayedClubs] = useState([]);\n  let [featured, setFeatured] = useState({});\n\n  const allClubs = school.clubs === undefined ? [] : school.clubs;\n  const clubIds = displayedClubs.map(club => club.id);\n\n  function invisibleFilter(clubs) {\n    let filteredClubs = [];\n\n    for (let i = 0; i < clubs.length; i++) {\n      if (clubs[i].is_visible) {\n        filteredClubs.push(clubs[i]);\n      }\n    }\n    return filteredClubs;\n  }\n\n  function determineFeatured(response) {\n    if (response.curr_featured_order != 0) {\n      let position = response.curr_featured_order;\n\n      // Keep iterating through clubs until you find a club that is visible and is after the current featured id\n      while (\n        Object.keys(featured).length == 0 &&\n        position <= response.clubs.length\n      ) {\n        function getClubByOrder(featuredOrder) {\n          let clubs = response.clubs.filter(\n            (club) => club.featured_order == featuredOrder\n          );\n          if (clubs.length == 1) {\n            return clubs[0];\n          }\n          return null;\n        }\n\n        let club = getClubByOrder(position);\n\n        if (club.is_visible) {\n          let id = club.id;\n          XroadsAPI.fetchClub(id).then((res) => {\n            if (res.ok) {\n              res.json().then((response) => setFeatured(response));\n            }\n          });\n          break;\n        } else {\n          position++;\n        }\n      }\n    }\n  }\n\n  function loadClubs() {\n    XroadsAPI.fetchClubs(params.schoolId).then((res) => {\n      if (res.ok) {\n        return res.json().then(response => {\n          setSchool(response);\n          let clubs = invisibleFilter(response.clubs);\n          setDisplayedClubs(clubs);\n          determineFeatured(response)\n        });\n      } else {\n        history.push(\"/\");\n      }\n    });\n  }\n\n  function searchFilter(matchingIds) {\n    let matchingClubs = allClubs;\n    if (matchingIds.length > 0) {\n      matchingClubs = matchingClubs.filter((c, i) =>\n        matchingIds.includes(c.id.toString())\n      );\n    } else {\n      matchingClubs = [];\n    }\n    setDisplayedClubs(matchingClubs);\n  }\n\n  useEffect(() => {\n    console.log(\"ClubBrowser component did mount\");\n    loadClubs();\n  }, [params.school]);\n\n  return (\n    <div>\n      <Navbar>xroads</Navbar>\n      <div className=\"body\">\n        {/* <UpcomingEvents events={school.events} displayedClubs={displayedClubs}></UpcomingEvents> */}\n        <FeaturedCard club={featured}></FeaturedCard>\n        <SearchBar\n          key={clubIds}\n          clubs={allClubs}\n          filterClubs={searchFilter}\n        ></SearchBar>\n        <div className=\"card-container\">\n          {displayedClubs.length == 0 ? (\n            <h1>Loading...</h1>\n          ) : (\n            displayedClubs.map((club) => (\n              <ClubCard\n                key={club.id}\n                id={club.id}\n                title={club.name}\n                imageURL={club.main_img}\n                description={club.description}\n                hidden={!club.is_visible}\n                school={params.schoolId}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScreenClubBrowser;\n","/home/kalin/Coding/XRoads/frontend/src/screens/Club/Edit.jsx",["172","173"],"/home/kalin/Coding/XRoads/frontend/src/screens/Club/Page.jsx",["174","175","176","177","178"],"import React, { useState, useEffect, Suspense } from 'react';\nimport Navbar from '../../components/Common/Navbar/Navbar';\nimport { AutoSlide, Slideshow } from '../../components/Common/Slides/Slides';\n\nimport ClubBodyDetail from '../../components/Club/Body/Body';\n\nimport * as XroadsAPI from '../../service/xroads-api';\nimport { useStateValue } from '../../service/State';\n\nimport ReactNotification from 'react-notifications-component'\nimport 'react-notifications-component/dist/theme.css'\nimport checkURLParams from '../Routes/utils';\nimport { useHistory } from 'react-router-dom';\nimport {MeetingCard} from '../../components/Club/Meeting/Meetings';\n\n// This page is going to use the react hooks format: https://reactjs.org/docs/hooks-overview.html\n// This: { match: { params: { id }}} is the same as props.match.params.id and you can refer to id directly later\nconst ScreenClubDetail = ({ match: { params } }) => {\n  let history = useHistory();\n  console.log(params);\n  const [club, setClub] = useState();\n\n  useEffect(() => {\n    XroadsAPI.fetchClub(params.clubId).then(res => {\n      if (res.ok) {\n        return res.json().then(clubRes => {\n          console.log(clubRes)\n          setClub(clubRes);\n        });\n      } else {\n        history.push(`/school/${params.schoolId}`)\n      }\n\n    });\n  }, [params.clubId]);\n\n\n  if (club == undefined) {\n    return (\n      <div>\n        <Navbar>xroads</Navbar>\n      </div>\n    );\n  }\n  else {\n    return (\n      <div>\n        <Navbar school={params.schoolId}>xroads</Navbar>\n        <ReactNotification />\n        <Slideshow>\n          {club.slides.map(url => <AutoSlide url={url}/>)}\n        </Slideshow>\n        <ClubBodyDetail club={club}/>\n        {club.events.map(event => <MeetingCard event={event} />)}\n        \n      </div>\n    );\n  }\n};\n\n\nexport default ScreenClubDetail;\n","/home/kalin/Coding/XRoads/frontend/src/components/Help/Navigation.jsx",[],"/home/kalin/Coding/XRoads/frontend/src/components/Help/Help.jsx",[],"/home/kalin/Coding/XRoads/frontend/src/components/Club/Edit/ClubCode.jsx",["179"],"import \"../Edit/ClubCode.scss\";\n\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport React from \"react\";\nimport Navbar from \"../../Common/Navbar/Navbar\";\nimport { sendRequest } from \"../../../service/xroads-api\";\n\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css for alert\nimport { store } from \"react-notifications-component\";\nimport { useStateValue } from \"../../../service/State\";\nimport { useHistory } from \"react-router-dom\";\n\n\nconst ClubCode = () => {\n    let history = useHistory();\n    const [state, dispatch] = useStateValue();\n    let school = state.user.school;\n\n    const onSubmit = (values) => {\n        console.log(values)\n        sendRequest('check_code', { schoolId: school }, 'GET', null, {code: values.code}).then(response => {\n            if (response.ok) {\n                response.json().then(club => {\n                    let url = `/school/${school}/clubs/${club.id}/edit/${values.code}`\n                    console.log(url)\n                    history.push(url)\n                })\n            } else {\n                store.addNotification({\n                    title: \"Warning\",\n                    message: \"Invalid club code given\",\n                    type: \"warning\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    dismiss: {\n                      duration: 5000,\n                      onScreen: true,\n                    },\n                  });\n            }\n\n        })\n    }\n\n    return (\n        <div>\n            <Navbar></Navbar>\n            <div className=\"center-form\">\n                <Formik\n                    initialValues={{ code: '' }}\n                    validationSchema={Yup.object({\n                        code: Yup.string().required()\n                    })}\n                    onSubmit={onSubmit}\n                >\n                    {(formik) => (\n                        <form className=\"xr-form\" onSubmit={formik.handleSubmit}>\n\n                            <div className=\"fields\">\n                                <label><h2>Enter your club code</h2></label>\n                                <input id=\"only-field\" placeholder=\"Club code\" {...formik.getFieldProps(\"code\")}></input>\n                                <button id=\"xr-submit\" type=\"submit\">Edit now!</button>\n                            </div>\n                        </form>\n                    )}\n                </Formik>\n            </div>\n\n        </div>\n    );\n};\n\nexport default ClubCode;\n","/home/kalin/Coding/XRoads/frontend/src/service/xroads-api.js",[],"/home/kalin/Coding/XRoads/frontend/src/components/Club/Edit/Edit.jsx",["180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196"],"import React, { useContext, useEffect } from \"react\";\n\nimport \"./Edit.scss\";\n\nimport RichEditor from \"../../Common/RichEditor/RichEditor\";\n\nimport { useState } from \"react\";\nimport { sendRequest, updateClub } from \"../../../service/xroads-api\";\nimport { useStateValue } from \"../../../service/State\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport { store } from \"react-notifications-component\";\n\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css for alert\nimport { Formik, useField, withFormik, yupToFormErrors } from \"formik\";\nimport * as Yup from 'yup';\nimport { ContentState, EditorState } from \"draft-js\";\nimport \"../../Common/Form/FormStyle.scss\";\nimport DynamicForm from \"../../Common/Form/DynamicForm\";\nimport { ClubContext } from \"../../../screens/Club/Routes\";\n\nconst fieldData = {\n    presentation_url: {\n        type: 'text',\n        fieldProps: {\n            label: 'Presentation Link',\n        },\n        validation: Yup.string().url().matches(\"^.*docs\\.google\\.com\\/presentation\\/d\\/(?<id>[^\\/]*).*\", \"Please enter a valid google slides url\"),\n    },\n    contact: {\n        type: 'text',\n        fieldProps: {\n            label: 'Club contact',\n        },\n        validation: Yup.string().email(\"Please enter a valid contact email\")\n    },\n    extra_info: {\n        type: 'textarea',\n        fieldProps: {\n            label: 'Detailed Info Email Body',\n        },\n        validation: Yup.string(),\n    },\n    description: {\n        fieldProps: {\n            label: 'Club Page Description'\n        },\n        type: 'rich-text',\n    },\n}\n\n// Created by following this example: https://codesandbox.io/s/QW1rqjBLl?file=/index.js:860-992\nconst GeneralEdit = (props) => {\n    const [state, dispatch] = useStateValue();\n    const [club, setClub] = useContext(ClubContext);\n    const [isVisible, setVisibility] = useState(club.is_visible);\n\n    // This returns a dictionary of every field and the associated value of that (ex want to know every fields input type)\n    const saveClubInfo = (values, { setSubmitting }) => {\n        updateClub(club.id, values, club.code).then((res) => {\n            if (res.ok) {\n                res.json().then(() => {\n                    store.addNotification({\n                        title: \"Saved\",\n                        message: \"Club details successfully saved\",\n                        type: \"success\",\n                        insert: \"top\",\n                        container: \"top-right\",\n                        dismiss: {\n                            duration: 5000,\n                            onScreen: true,\n                        },\n                    });\n                });\n            }\n\n        }\n        );\n        setSubmitting(false);\n    };\n\n    const getEditableFields = (fields, data) => {\n        if (data == null) {\n            return []\n        }\n        if (!data.school.club_contact) {\n            fields.splice(fields.indexOf('contact'), 1)\n        }\n        return fields;\n    }\n    \n\n    const [fieldsJSX, getInitialValues, getValidation] = DynamicForm(fieldData, club, getEditableFields);\n\n    const Form = (formik) => (\n        <form className=\"editBody\" onSubmit={formik.handleSubmit}>\n            {fieldsJSX(formik)}\n            <button type=\"submit\" id=\"club-submit\" disabled={formik.isSubmitting}>Save</button>\n        </form>\n    )\n\n    const formikEnhancer = withFormik({\n        mapPropsToValues: props => getInitialValues(),\n        validationSchema: Yup.object().shape(getValidation()),\n        handleSubmit: saveClubInfo,\n        displayName: 'Main Editor'\n    });\n\n    const toggleHide = () => {\n        let user = state.user;\n        let urlArgs = {\n            clubId: club.id,\n            code: club.code\n        };\n        sendRequest(\"toggle_hide_club\", urlArgs, \"POST\", {}).then((response) => {\n            if (response.ok) {\n                setVisibility(!isVisible);\n                console.log(\"The club is now \" + isVisible.toString());\n                store.addNotification({\n                    title: \"Club \" + (isVisible ? \"Hidden\" : \"Visible\"),\n                    message:\n                        \"The club is now visible to \" +\n                        (isVisible ? \"club editors only\" : \"all users\"),\n                    type: \"success\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    dismiss: {\n                        duration: 5000,\n                        onScreen: true,\n                    },\n                });\n            }\n        });\n    };\n\n    const EditForm = formikEnhancer(Form);\n\n    return (\n        <div className=\"centerContent\">\n            <div className=\"editBody\">\n                <label>Hide club</label>\n                <label className=\"switch\">\n                    <input type=\"checkbox\" onClick={toggleHide} checked={!isVisible} />\n                    <span className=\"slider round\"></span>\n                </label>\n                <EditForm></EditForm>\n            </div>\n        </div>\n    );\n};\n\n\nexport { GeneralEdit };","/home/kalin/Coding/XRoads/frontend/src/components/Club/Card/Card.jsx",["197","198"],"import React, { useState } from \"react\";\nimport \"./Card.scss\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nconst ClubBrowserCard = (props) => {\n  var clubStyle = { backgroundImage: `url(${props.imageURL})` };\n  if (props.hidden) {\n    clubStyle = { backgroundImage: `url(${props.imageURL})`, filter: \"grayscale()\" }\n  }\n\n  return (\n    <div className=\"card\">\n      <Link to={`/school/${props.school}/clubs/${props.id}`}>\n        <div className=\"card-content\" style={clubStyle}>\n          <h1>\n            {props.title}\n          </h1>\n        </div>\n      </Link>\n    </div>\n  );\n}\nexport default ClubBrowserCard;","/home/kalin/Coding/XRoads/frontend/src/screens/Routes/utils.jsx",[],"/home/kalin/Coding/XRoads/frontend/src/components/Club/Featured/Featured.jsx",["199","200","201"],"import React, { useEffect, useState } from \"react\";\nimport { AutoSlide, Slideshow } from \"../../Common/Slides/Slides\";\nimport Sticky from '../../Common/StickyCard/StickyCard';\nimport './Featured.scss';\nimport { Link, useHistory } from \"react-router-dom\";\nimport ReactPlayer from \"react-player\";\n\nconst FeaturedCard = (props) => {\n    let [club, setClub] = useState({});\n\n    useEffect(() => {\n        setClub(props.club)\n    }, [props.club])\n\n    if (Object.keys(club).length == 0) {\n        return null;\n    }\n\n    var description = club.description;\n    if (club.description.length > 150) {\n        description = club.description.substring(0, 5000).concat(\"...\")\n    }\n\n    return (\n        <div class=\"featured-container\">\n            <MeetingsSummary />\n            <div className=\"featured-club\">\n                <Sticky label=\"Featured Club\">\n                    <div className=\"featured-club-content\">\n                        <Slideshow singleSlide>\n                            {club.slides != null ? club.slides.map(url => <AutoSlide url={url}></AutoSlide>) : null}\n                        </Slideshow>\n                        <div className=\"featured-club-details\">\n                            <Link to={`/school/${club.school}/clubs/${club.id}`}>\n                                <h2>{club.name}</h2>\n                                <p>{description}</p>\n                                <div className=\"haze-bottom\" />\n                            </Link>\n                        </div>\n                    </div>\n                </Sticky>\n            </div>\n        </div>\n    );\n}\n\nconst MeetingsSummary = (props) => {\n    return (\n        <div className=\"meetings\">\n            <Sticky label=\"Upcoming Events\">\n                <div className=\"meeting-list\">\n                    <h3>Today</h3>\n                    <p>Robotics Club · 3 pm</p>\n                    <p>Model UN · 3:30 pm</p>\n                    <p>Badminton Club · 4 pm</p>\n\n                    <h3>Upcoming</h3>\n                    <p>Robotics Club · Jan 6 · 4 pm</p>\n                </div>\n            </Sticky>\n        </div>\n    )\n}\n\nexport default FeaturedCard;","/home/kalin/Coding/XRoads/frontend/src/components/Club/Meeting/Meetings.jsx",["202","203","204","205","206","207","208","209","210"],"import React, { useContext, useState } from \"react\";\nimport DynamicForm from '../../Common/Form/DynamicForm';\nimport * as Yup from 'yup';\nimport { withFormik } from 'formik';\nimport moment from \"moment\";\nimport { sendRequest } from \"../../../service/xroads-api\";\nimport { ClubContext } from \"../../../screens/Club/Routes\";\nimport { store } from \"react-notifications-component\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css for alert\nimport Dayz from \"dayz\";\nimport * as utils from \"./utils\";\n\nconst MeetingsEdit = () => {\n    const [club, setClub] = useContext(ClubContext);\n    let [displayAdd, setDisplay] = useState(true);\n    let [events, setEvents] = [club.events, (events) => setClub({ ...club, events: events })];\n\n    const addEventClick = (e) => {\n        setDisplay(!displayAdd);\n    }\n\n    return (\n        <div>\n            {events.map(event => <MeetingCard event={event} editable={true} state={[events, setEvents]} />)}\n            { displayAdd ? <button onClick={addEventClick}>Add event</button> : <MeetingCard event={{}} displayEdit={true} editable={true} setDisplay={setDisplay} />}\n        </div>\n    );\n}\n\nconst MeetingFormFunc = (initialData = {}, setDisplay = (bool) => null) => {\n    const fieldData = {\n        name: {\n            initialValue: \"\",\n            type: 'text',\n            fieldProps: {\n                label: 'Meeting name'\n            },\n            validation: Yup.string().required(),\n        },\n        date: {\n            initialValue: moment().format(\"yyyy-MM-DD\"),\n            type: 'date-selector',\n            fieldProps: {\n                label: 'Meeting Date'\n            },\n            validation: Yup.date().required()\n        },\n        start: {\n            initialValue: moment(\"14:15:00\", 'H:mm:ss').toDate(),\n            type: 'time-selector',\n            fieldProps: {\n                label: 'Start time'\n            },\n            validation: Yup.date().required()\n        },\n        end: {\n            initialValue: moment(\"15:15:00\", 'H:mm:ss').toDate(),\n            type: 'time-selector',\n            fieldProps: {\n                label: 'End time'\n            },\n            validation: Yup.date().min(Yup.ref('start'), \"End time must be sometime after start time\")\n        },\n        description: {\n            type: 'text',\n            initialValue: 'Some initial value',\n            fieldProps: {\n                label: 'Meeting description'\n            },\n            validation: Yup.string().required(),\n        },\n    }\n    const [club, setClub] = useContext(ClubContext);\n    let [events, setEvents] = [club.events, (events) => setClub({ ...club, events: events })];\n    const [fieldsJSX, getInitialValues, getValidation] = DynamicForm(fieldData, initialData);\n    const Form = (formik) => (\n        <form className=\"editBody\" onSubmit={formik.handleSubmit}>\n            {fieldsJSX(formik)}\n            { Object.keys(initialData).length == 0 ?\n                <button type=\"submit\" id=\"club-submit\" onClick={() => createEvent(formik.values, club)} disabled={formik.isSubmitting}>\"Create Event\"</button>\n\n                :\n                <button type=\"submit\" id=\"club-submit\" onClick={() => updateEvent(formik.values, club, initialData)} disabled={formik.isSubmitting}>Save Event</button>\n\n            }\n            <button type=\"reset\" id=\"club-reset\" onClick={() => handleReset(formik)}>Cancel Event</button>\n        </form>\n    )\n\n    const updateEvent = (values, club, initialData) => {\n        // Send PUT request to server to update event\n        let eventId = initialData.id\n        let urlParams = { clubId: club.id, clubCode: club.code, eventId: eventId }\n        sendRequest('event_edit', urlParams, \"PUT\", values).then(response => {\n            if (response.ok) {\n                response.json().then(body => {\n                    // Update the club event state\n                    let newEvents = events.map(event => {\n                        if (event.id == initialData.id) {\n                            event = body\n                        }\n                        return event\n                    })\n                    setEvents(newEvents);\n                })\n                store.addNotification({\n                    title: \"Event updated!\",\n                    message: \"Event \" + values.name + \" has been saved!\",\n                    type: \"success\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    dismiss: {\n                        duration: 5000,\n                        onScreen: true,\n                    },\n                });\n            }\n\n        })\n    }\n\n    const createEvent = (values, club) => {\n        console.log(values)\n        let urlParams = { clubId: club.id, clubCode: club.code }\n        sendRequest('event_create', urlParams, \"POST\", values).then(response => {\n            if (response.ok) {\n                // Create the new event and update state\n                response.json().then(body => {\n                    console.log(body);\n                    setEvents([...events, body]);\n                })\n                store.addNotification({\n                    title: \"Event Created!\",\n                    message: \"Event \" + values.name + \" has been created!\",\n                    type: \"success\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    dismiss: {\n                        duration: 5000,\n                        onScreen: true,\n                    },\n                });\n            }\n\n        })\n    }\n\n    const cancelEvent = () => {\n        let eventId = initialData.id\n        let urlParams = { clubId: club.id, clubCode: club.code, eventId: eventId }\n        sendRequest('event_edit', urlParams, \"DELETE\", {}).then(response => {\n            if (response.ok) {\n                // Create the new event and update state\n                response.json().then(body => {\n                    setEvents(events.map(event => event.id != eventId));\n                })\n                store.addNotification({\n                    title: \"Event Cancelled\",\n                    message: \"Event was successfully canceled\",\n                    type: \"success\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    dismiss: {\n                        duration: 5000,\n                        onScreen: true,\n                    },\n                });\n            }\n\n        })\n    }\n\n    const saveInfo = (values, { setSubmitting }) => {\n        const formatTime = (time) => moment(time).format(\"H:mm:ss\")\n        const formatDate = (date) => moment(date).format(\"yyyy-MM-DD\")\n        values = { ...values, start: formatTime(values.start), end: formatTime(values.end), date: formatDate(values.date) }\n\n        if (Object.keys(initialData).includes(\"id\")) {\n            updateEvent(values, club, initialData)\n        } else {\n            createEvent(values, club, initialData)\n        }\n        setSubmitting(false);\n    }\n\n    const handleReset = (formik) => {\n        if (window.confirm(\"Are you sure you want to cancel the event?\")) {\n            if (Object.keys(initialData).length != 0) {\n                // Remove the event from the events being displayed\n                setEvents(events.filter(event => event.id != initialData.id));\n                cancelEvent()\n            } else {\n                setDisplay(true);\n            }\n            formik.resetForm()\n        }\n    }\n\n    const formikEnhancer = withFormik({\n        mapPropsToValues: props => getInitialValues(),\n        validationSchema: Yup.object().shape(getValidation()),\n        handleSubmit: saveInfo,\n        displayName: 'Edit Meeting',\n    });\n\n    return formikEnhancer(Form);\n}\n\nconst MeetingCard = ({ event, editable = false, displayEdit = false, state = {}, setDisplay = null }) => {\n    let [showEdit, setEdit] = useState(displayEdit);\n    const MeetingForm = MeetingFormFunc(event, state, setDisplay)\n\n    if (Object.keys(event).length == 0) {\n        return showEdit ? <MeetingForm /> : null;\n    }\n\n    let date_str = new Date(event.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric', timeZone: 'utc' });\n    let start = moment(event.start, 'H:mm:ss').format('h:mm a');\n    let end = moment(event.end, 'H:mm:ss').format('h:mm a');\n    const handleClick = (e) => {\n        if (editable) {\n            setEdit(!showEdit);\n        }\n    }\n\n    return (\n        <div>\n            <h2>{event.name}</h2>\n            <b>{`${date_str}  ${start} — ${end}`}</b>\n            {editable ? <button onClick={handleClick}>Edit</button> : null}\n            <p>{event.description}</p>\n            <br />\n            {showEdit ? <MeetingForm /> : null}\n        </div>\n    )\n}\n\nconst CalendarView = ({ events }) => {\n    // utils.strToTime(event.start)\n    // utils.strToTime(event.end)\n    let dayzEvents = Dayz.EventsCollection(events.map(event => { return { content: event.name, range: moment } }))\n\n    return (\n        <div>\n            <Dayz display=\"month\" date={new Date()} events={{}} />\n        </div>\n    );\n};\n\n\nexport { MeetingsEdit, MeetingCard };\n","/home/kalin/Coding/XRoads/frontend/src/components/Club/Body/Body.jsx",["211"],"import React, { useEffect } from \"react\";\nimport Linkify from \"react-linkify\";\nimport \"./Body.scss\";\nimport \"./../Edit/Edit.scss\";\n\nconst Markdown = require(\"react-markdown\");\n\n// TODO eventually we should not have this component existing and just have it directly in the equivalent screen\n\nconst ClubBodyDetail = (props) => {\n  console.log(\"Received club in ClubBodyDetails\", props.club);\n\n  return (\n    <div className=\"centerContent\">\n      <div className=\"details\">\n        <div className=\"clubHeading\">\n          <h1>{props.club.name}</h1>\n\n          <Linkify>\n            <h2> {props.club.join_promo}</h2>\n          </Linkify>\n        </div>\n\n        <Markdown source={props.club.description} />\n      </div>\n    </div>\n  );\n};\n\nexport default ClubBodyDetail;\n","/home/kalin/Coding/XRoads/frontend/src/components/Common/Search/Search.jsx",["212"],"import React from 'react';\nimport './Search.scss';\nimport Sticky from '../StickyCard/StickyCard.jsx';\nimport lunr from 'lunr';\n\nclass SearchBar extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchQuery: \"\",\n      searchRes: null\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.searchClubs = this.searchClubs.bind(this);\n\n    this.clubs = props.clubs;\n    console.log(\"Received clubs for searching\", this.props.clubs);\n\n    this.lunrIndex = lunr(function () {\n      this.field(\"name\", {\n        boost: 10\n      });\n      this.field(\"description\");\n\n      this.ref(\"id\");\n\n      props.clubs.forEach(function (club) {\n        this.add(club)\n      }, this)\n    });\n\n  }\n\n  handleChange(e) {\n    console.log(\"input text changed\", e);\n    // setSearchQuery(e.target.value);\n    let v = e.target.value\n    this.setState(() => ({\n      searchQuery: v\n    }));\n  }\n\n  searchClubs(e) {\n    console.log(\"Search clubs called with query\", this.state.searchQuery);\n\n    e.preventDefault();\n\n    let searchRes = this.lunrIndex.search(this.state.searchQuery).map(function (result) {\n      return result.ref;\n    });\n    console.log(\"Lunr index is\", this.lunrIndex);\n\n    console.log(\"Search result found\", searchRes);\n\n    this.props.filterClubs(searchRes)\n\n    this.setState({\n      searchRes: searchRes\n    });\n\n\n  }\n  render() {\n    const searchResNotFound = this.state.searchRes != null && this.state.searchRes.length == 0\n    return (\n      <div>\n        <div className=\"search-center\">\n          <Sticky label=\"All Clubs\">\n            <form className=\"default-searchbar\" onSubmit={this.searchClubs}>\n              <input type=\"text\" id=\"search-box\" placeholder=\"Search for clubs...\" value={this.searchQuery} onChange={this.handleChange}></input>\n              <input id=\"search-submit\" type=\"submit\" value=\"\" onClick={this.searchClubs}></input>\n            </form>\n          </Sticky>\n        </div>\n        { searchResNotFound ? <div>No results in search - womp, womp, womp :(  </div> : <div />}\n      </div>);\n  }\n}\n\n\nexport default SearchBar;","/home/kalin/Coding/XRoads/frontend/src/components/Common/Tabs/Tabs.jsx",["213"],"import React from 'react';\nimport variables from '../Variables.scss';\nimport PropTypes from 'prop-types';\nimport './Tabs.scss';\n\n\nclass Tabs extends React.Component {\n    static propTypes = {\n        children: PropTypes.instanceOf(Array).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: this.props.children[0].props.label,\n        };\n        this.tabContent = React.createRef();\n    }\n\n    onClickTabItem = (tab) => {\n        this.setState({ activeTab: tab });\n        this.tabContent.current.classList.add(\"fadeIn\")\n        setTimeout(() => {\n          this.tabContent.current.classList.remove(\"fadeIn\")\n        }, 300);\n    }\n\n\n\n    render() {\n        const {\n            onClickTabItem,\n            props: {\n                children,\n            },\n            state: {\n                activeTab,\n            }\n        } = this;\n        return (\n            <div className=\"tabs\">\n                <ol className=\"tab-list\">\n                    {children.map((child) => {\n                        const { label } = child.props;\n                        return (\n                            <Tab\n                                activeTab={activeTab}\n                                key={label}\n                                label={label}\n                                onClick={onClickTabItem}\n                            />\n                        );\n                    })}\n                </ol>\n                <div ref={this.tabContent} className=\"tab-content\">\n                    {children.map((child) => {\n                        if (child.props.label !== activeTab) return undefined;\n                        return child.props.children;\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nclass Tab extends React.Component {\n    static propTypes = {\n      activeTab: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      onClick: PropTypes.func.isRequired,\n    };\n  \n    onClick = () => {\n      const { label, onClick } = this.props;\n      onClick(label);\n    }\n  \n    render() {\n      const {\n        onClick,\n        props: {\n          activeTab,\n          label,\n        },\n      } = this;\n  \n      let className = 'tab-list-item';\n  \n      if (activeTab === label) {\n        className += ' tab-list-active';\n      }\n  \n      return (\n        <li\n          className={className}\n          onClick={onClick}\n        >\n          {label}\n        </li>\n      );\n    }\n  }\n\nexport default Tabs;","/home/kalin/Coding/XRoads/frontend/src/components/Common/Navbar/Navbar.jsx",["214","215","216"],"import React, { useEffect, useState } from \"react\";\nimport \"./Navbar.scss\";\nimport { AlertBar } from \"../AlertBar/AlertBar\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { useStateValue } from \"../../../service/State\";\n\nconst Navbar = () => {\n  const [state, dispatch] = useStateValue();\n  let school = state.user.school;\n\n  return (\n    <div>\n      <div className=\"navbar-simple\">\n        <NavLink className=\"logoLink\" to={`/school/${school}/`} >\n          <div className=\"xroadsLogo\" >\n            <h1>xroads</h1>\n          </div>\n        </NavLink>\n        <div className=\"navbar-buttons\">\n          <Link className=\"nav-item\" to={`/school/${school}/clubs/edit`} >\n            edit club\n          </Link>\n        </div>\n      </div>\n      <AlertBar>\n      </AlertBar>\n    </div>\n  );\n\n}\n\nexport default Navbar;","/home/kalin/Coding/XRoads/frontend/src/components/Common/Slides/Slides.jsx",["217"],"import React from 'react';\nimport { Carousel } from 'react-responsive-carousel';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\nimport ReactPlayer from 'react-player';\nimport './Slides.scss';\nimport variables from '../Variables.scss';\n\nclass Slideshow extends React.Component {\n    render() {\n        let centered = true;\n        if (this.props.singleSlide) {\n            centered = false;\n        }\n\n        let centerSlidePercentage = Math.min((variables.maxPageWidth.replace('px', '') / window.innerWidth) * 100, 100);\n\n        return (\n            <Carousel\n                centerMode={centered}\n                infiniteLoop\n                swipeable\n                showThumbs={false}\n                showIndicators={false}\n                showStatus={false}\n                centerSlidePercentage={centerSlidePercentage}\n                renderArrowPrev={(onClickHandler, hasPrev, label) =>\n                    hasPrev && (\n                        <button className=\"slide-arrow\" type=\"button\" onClick={onClickHandler} title={label} style={{ left: 15 }}>&lt;</button>\n                    )\n                }\n                renderArrowNext={(onClickHandler, hasNext, label) =>\n                    hasNext && (\n                        <button className=\"slide-arrow\" type=\"button\" onClick={onClickHandler} title={label} style={{ right: 15 }}>&gt;</button>\n                    )\n                }\n            >\n                {this.props.children}\n            </Carousel>\n        );\n    }\n}\n\nconst AutoSlide = ({ url }) => {\n    if (url != null && url.includes(\"youtu\")) {\n        let regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n        let match = url.match(regExp);\n        if (match) {\n            return (<ReactPlayer width=\"100%\" height=\"100%\" url={url}></ReactPlayer>)\n        }\n    }\n    return (<div><img src={url}></img></div>)\n}\n\nexport { Slideshow, AutoSlide };","/home/kalin/Coding/XRoads/frontend/src/components/Common/StickyCard/StickyCard.jsx",["218"],"import React, { useState } from \"react\";\nimport './StickyCard.scss';\n\nconst Sticky = (props) => {\n    return (\n        <div className=\"sticky\">\n            <div className=\"sticky-label\">\n                <h3>{props.label}</h3>\n            </div>\n            {props.children}\n        </div>\n    );\n}\nexport default Sticky;","/home/kalin/Coding/XRoads/frontend/src/components/Club/Meeting/utils.js",["219","220","221","222","223","224","225","226"],"import moment from \"moment\";\n\nconst weekdayName = (dateObj) => moment(dateObj).format('dddd');\nconst strToTime = (timeStr) => moment(timeStr, \"H:mm:ss\").toDate();\nconst parseJSDate = (dateStr) => new Date(Date.parse(dateStr));\nconst timeObjToStr = (timeObj) => moment(timeObj).format(\"h:mm  a\");\nconst dateStrToDate = (dateStr) => moment(dateStr, \"MM/dd/yyyy\").toDate();\n\nconst isToday = (otherDate) => {\n    if (typeof otherDate == \"string\") {\n        otherDate = parseJSDate(otherDate);\n    }\n    const today = new Date()\n    return otherDate.getDate() == today.getDate() &&\n        otherDate.getMonth() == today.getMonth() &&\n        otherDate.getFullYear() == today.getFullYear()\n}\n\nconst eventToStartEnd = (event) => {\n    let date = dateStrToDate(event.date);\n    let endDate = dateStrToDate(event.date);\n    let startTime = strToTime(event.start)\n    let endTime = strToTime(event.end)\n    // moment(date).clone(). TODO fix\n\n    new Date().setTime()\n    new Date().getTime()\n}\n\nexport {weekdayName, strToTime, parseJSDate, timeObjToStr, isToday};","/home/kalin/Coding/XRoads/frontend/src/components/Common/Form/DynamicForm.jsx",["227","228","229","230","231","232","233","234","235","236"],"import { useField } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactDatePicker from \"react-datepicker\";\nimport RichEditor from \"../RichEditor/RichEditor\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport moment from \"moment\";\n\nconst InputField = ({ label, type, ...props }) => {\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input> and also replace ErrorMessage entirely.\n    const [field, meta] = useField(props);\n    return (\n        <>\n            <label htmlFor={props.id || props.name}>{label}</label>\n            { type == \"textarea\" ? <textarea style={{ height: \"200px\" }} cols=\"2\" {...field} {...props}></textarea> : <input className=\"text-input\" {...field} {...props} />}\n            {meta.touched && meta.error ? (\n                <div className=\"error\">{meta.error}</div>\n            ) : null}\n        </>\n    );\n};\n\nconst FormikTextEditor = ({ label, name }) => {\n    const [field, meta, helpers] = useField(name)\n    const initial = meta.initialValue;\n    const { setValue } = helpers;\n\n    return (\n        <div>\n            <label>{label}</label>\n            <RichEditor initialValue={initial} setValue={setValue}></RichEditor>\n        </div>\n    );\n}\n\nconst TimePicker = ({ label, name }) => {\n    const [field, meta, helpers] = useField(name);\n    const value = () => moment(meta.value, 'H:mm:ss').toDate();\n    const { setValue } = helpers;\n\n    useEffect(() => {\n        setValue(value())\n    }, [])\n\n    return (\n        <div>\n            <label>{label}</label>\n            <ReactDatePicker\n                selected={value()}\n                onChange={date => {\n                    if (moment(date).isValid()) {\n                        setValue(date);\n                    } else {\n                        setValue(moment().toDate())\n                    }\n                }}\n                showTimeSelect\n                showTimeSelectOnly\n                timeIntervals={15}\n                timeCaption=\"Time\"\n                dateFormat=\"h:mm aa\"\n            />\n            {meta.touched && meta.error ? (\n                <div className=\"error\">{meta.error}</div>\n            ) : null}\n        </div>\n\n    );\n}\n\nconst DatePicker = ({ label, name }) => {\n    const [field, meta, helpers] = useField(name);\n    const value = moment(meta.value, 'yyyy-MM-DD').toDate();\n    const { setValue } = helpers;\n    return (\n        <div>\n            <label>{label}</label>\n            <ReactDatePicker\n                selected={value}\n                onChange={date => {\n                    if (moment(date).isValid()) {\n                        setValue(date);\n                    } else {\n                        setValue(moment().toDate())\n                    }\n                }}\n                dateFormat=\"MM/dd/yyyy\"\n            />\n            {meta.touched && meta.error ? (\n                <div className=\"error\">{meta.error}</div>\n            ) : null}\n\n        </div>\n    );\n}\n\nconst DynamicForm = (fieldData, data, editableFields = null) => {\n    /* \n    attr:\n        The key you want to evaluate for child elements. Ex: if attr=\"attr1\", \n        for each key value pair in the object, it retrieves the child object's\n        provided attr  {a: { attr1: 1, attr2: 2} }, in this case it returns {a: 1}\n    \n    obj: A JS object that has also has children as its values\n\n    fields: This array specifies which key values to retrieve the attribute for. If\n    an empty array, all fields are used.\n\n    skipLogic: If you provide skipLogic=(key, value) => boolean, when it evaluates \n    to true, that key value pair will not be included in the result\n\n    attrFiller:\n        If the object does not have that attr in its child object,\n        this calls a function that returns what value should stand in\n        its place. (field, data) => filler value\n    */\n    const objByChildAttr = (attr, obj, fields = [], skipLogic = null, attrFiller = null) => {\n        skipLogic = skipLogic == null ? (key, value) => false : skipLogic\n        attrFiller = attrFiller == null ? (child, data) => null : attrFiller\n        fields = fields.length == 0 ? Object.keys(obj) : fields\n\n        let filtered = {};\n        for (let field of fields) {\n            // if the object does not have the attr\n            if (!Object.keys(obj[field]).includes(attr)) {\n                filtered[field] = attrFiller(field, data)\n            }\n            if (skipLogic(field, obj[field][attr])) {\n                continue;\n            }\n            filtered[field] = obj[field][attr];\n        }\n        return filtered;\n    }\n\n    /* This returns an object with only the specified keys included */\n    const objFromKeys = (keys, obj) => {\n        let values = {};\n        for (var field of keys) {\n            values[field] = obj[field]\n        }\n        return values;\n    }\n\n    /* This retrieves the editable fields based on some conditions. \n    By default all fields are editable */\n    let getEditableFields = editableFields == null ? () => Object.keys(fieldData) : () => editableFields(Object.keys(fieldData), data)\n    /* This retrieves the initial values to be used in the form\n    based on what fields are editable. If the provided object is empty,\n    the editable fields are set to the specified default value. If\n    unspecified, it will throw an exception */\n    const getInitialValues = () => {\n        let editableFields = getEditableFields();\n\n        // This gets default values if it is an empty form\n        if (Object.keys(data).length == 0) {\n            const defaultUnspecified = (field, data) => {\n                throw new Error(\"You did not specify initialValue for field \" + field)\n            }\n\n            // This retrieves the initialValues for the fields. Throws error if unspecified. \n            return objByChildAttr('initialValue', fieldData, editableFields, null, defaultUnspecified)\n        }\n        return objFromKeys(editableFields, data);\n    }\n\n    /* This retrieves validation for each editable field. If validation\n    is not specified, validation = null */\n    const getValidation = () => {\n        return objByChildAttr('validation', fieldData, getEditableFields(),)\n    }\n\n    /* Based on fieldData, this will decided which components to render for the field.\n    You can specify props to be passed into the field by adding an attribute to a field\n    called fieldProps. */\n    const fieldsJSX = (formik, toDisplay=[]) => {\n        let compsToRender = [];\n        // This retrieves the components args for all the editable fields\n        let compData = objByChildAttr('component', fieldData, getEditableFields(), null, null)\n        // This retrieves all props to be passed into the fields of the form\n        let propsFromFields = objByChildAttr('fieldProps', fieldData, getEditableFields(), null, (data, child) => { });\n        \n        // Specifies which fields you want to display for more customizable styling. Default all fields\n        let fieldsToReturn = toDisplay.length == 0 ? Object.keys(compData) : toDisplay\n\n        for (let field of fieldsToReturn) {\n            // If a component is specified directly, it renders that instead\n            if (Object.keys(fieldData[field]).includes(\"component\")) {\n                compsToRender.push(fieldData[field].component(formik))\n                continue;\n            }\n\n            // If component not specified, gets proper component based on field attribute\n            switch (fieldData[field].type) {\n                case \"textarea\":\n                case \"text\":\n                    // Add props to field\n                    compsToRender.push(<InputField name={field} {...propsFromFields[field]}></InputField>)\n                    break;\n                case \"rich-text\":\n                    compsToRender.push(<FormikTextEditor name={field} {...propsFromFields[field]} />)\n                    break;\n                case \"time-selector\":\n                    compsToRender.push(<TimePicker name={field} {...propsFromFields[field]}></TimePicker>)\n                    break;\n                case \"date-selector\":\n                    compsToRender.push(<DatePicker name={field} {...propsFromFields[field]} />)\n                    break;\n            }\n        }\n        return compsToRender.map(item => item)\n    }\n\n    return [fieldsJSX, getInitialValues, getValidation]\n}\n\nexport default DynamicForm;","/home/kalin/Coding/XRoads/frontend/src/components/Common/RichEditor/RichEditor.jsx",["237","238","239","240","241","242","243","244"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Editor, EditorState, ContentState, RichUtils, getDefaultKeyBinding , convertFromRaw, convertToRaw } from 'draft-js';\nimport { draftToMarkdown, markdownToDraft } from 'markdown-draft-js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faListOl, faQuoteLeft, fa, faUnderline, faItalic, faBold, faListUl, faHeading } from '@fortawesome/free-solid-svg-icons'\n\n\nimport 'draft-js/dist/Draft.css';\n\nimport './RichEditor.scss';\nimport { useField, withFormik } from 'formik';\n\nconst {useState, useRef, useCallback} = React;\n\nfunction RichEditor({initialValue, setValue=(value) => null}) {\n  const currContentState = convertFromRaw(markdownToDraft(initialValue));\n  const [editorState, setEditorState] = useState(EditorState.createWithContent(currContentState));\n\n  const editor = useRef(null);\n\n  const focus = () => {\n    if (editor.current) editor.current.focus();\n  };\n\n  const handleKeyCommand = useCallback(\n    (command, editorState) => {\n      const newState = RichUtils.handleKeyCommand(editorState, command);\n      if (newState) {\n        setEditorState(newState);\n        return 'handled';\n      }\n      return 'not-handled';\n    },\n    [editorState, setEditorState],\n  );\n\n  const mapKeyToEditorCommand = useCallback(\n    e => {\n      switch (e.keyCode) {\n        case 9: // TAB\n          const newEditorState = RichUtils.onTab(\n            e,\n            editorState,\n            4 /* maxDepth */,\n          );\n          if (newEditorState !== editorState) {\n            setEditorState(newEditorState);\n          }\n          return null;\n      }\n      return getDefaultKeyBinding(e);\n    },\n    [editorState, setEditorState],\n  );\n\n  // If the user changes block type before entering any text, we can\n  // either style the placeholder or hide it. Let's just hide it now.\n  let className = 'RichEditor-editor';\n  var contentState = editorState.getCurrentContent();\n  if (!contentState.hasText()) {\n    if (\n      contentState\n        .getBlockMap()\n        .first()\n        .getType() !== 'unstyled'\n    ) {\n      className += ' RichEditor-hidePlaceholder';\n    }\n  }\n\n  const updateEditorState = (newEditorState) => {\n    const content = newEditorState.getCurrentContent();\n    const rawObject = convertToRaw(content);\n    const markdownString = draftToMarkdown(rawObject);\n    setValue(markdownString);\n    setEditorState(newEditorState);\n  }\n\n  return (\n    <div className=\"RichEditor-root\">\n      <InlineStyleControls\n        editorState={editorState}\n        onToggle={inlineStyle => {\n          const newState = RichUtils.toggleInlineStyle(\n            editorState,\n            inlineStyle,\n          );\n          setEditorState(newState);\n        }}\n      />\n      <BlockStyleControls\n        editorState={editorState}\n        onToggle={blockType => {\n          const newState = RichUtils.toggleBlockType(editorState, blockType);\n          setEditorState(newState);\n        }}\n      />\n      <div className={className} onClick={focus}>\n        <Editor\n          blockStyleFn={getBlockStyle}\n          customStyleMap={styleMap}\n          editorState={editorState}\n          handleKeyCommand={handleKeyCommand}\n          keyBindingFn={mapKeyToEditorCommand}\n          onChange={updateEditorState}\n          ref={editor}\n          spellCheck={true}\n        />\n      </div>\n    </div>\n  );\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n    default:\n      return null;\n  }\n}\n\nfunction StyleButton({onToggle, active, label, icon, style}) {\n  let className = 'RichEditor-styleButton';\n  if (active) {\n    className += ' RichEditor-activeButton';\n  }\n\n  return (\n    <span\n      className={className}\n      onMouseDown={e => {\n        e.preventDefault();\n        onToggle(style);\n      }}>\n      {typeof(label)=='string' && <b>{label}</b>}\n      { icon && <FontAwesomeIcon icon={icon} /> }\n      \n    </span>\n  );\n}\n\nconst BLOCK_TYPES = [\n  {id: 'h1', label: 'H1', style: 'header-one'},\n  {id: 'h2', label: 'H2', style: 'header-two'},\n  {id: 'h3', label: 'H3', style: 'header-three'},\n  {id: 'leftQuote', icon: faQuoteLeft,  style: 'blockquote'},\n  {id: 'unorderedList',  icon: faListUl, style: 'unordered-list-item'},\n  {id: 'orderedList',  icon: faListOl, style: 'ordered-list-item'},\n];\n\nfunction BlockStyleControls({editorState, onToggle}) {\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n\n  return (\n    <div className=\"RichEditor-controls RichEditor-blockControls\">\n      {BLOCK_TYPES.map(type => (\n        <StyleButton\n          key={type.id}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={onToggle}\n          style={type.style}\n          icon={type.icon}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst INLINE_STYLES = [\n  {id: 'bold', label: faBold, icon: faBold, style: 'BOLD'},\n  {id: 'italic', label: faItalic, icon: faItalic, style: 'ITALIC'},\n  {id: 'underline', label: faUnderline, icon: faUnderline, style: 'UNDERLINE'},\n];\n\nfunction InlineStyleControls({editorState, onToggle}) {\n  const currentStyle = editorState.getCurrentInlineStyle();\n  return (\n    <div className=\"RichEditor-controls\">\n      {INLINE_STYLES.map(type => (\n        <StyleButton\n          key={type.id}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={onToggle}\n          style={type.style}\n          icon={type.icon}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default RichEditor;","/home/kalin/Coding/XRoads/frontend/src/components/Common/AlertBar/AlertBar.jsx",[],{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","severity":1,"message":"250","line":1,"column":44,"nodeType":"251","messageId":"252","endLine":1,"endColumn":53},{"ruleId":"249","severity":1,"message":"253","line":1,"column":67,"nodeType":"251","messageId":"252","endLine":1,"endColumn":75},{"ruleId":"249","severity":1,"message":"254","line":2,"column":10,"nodeType":"251","messageId":"252","endLine":2,"endColumn":17},{"ruleId":"249","severity":1,"message":"255","line":20,"column":17,"nodeType":"251","messageId":"252","endLine":20,"endColumn":20},{"ruleId":"249","severity":1,"message":"256","line":21,"column":12,"nodeType":"251","messageId":"252","endLine":21,"endColumn":17},{"ruleId":"257","severity":1,"message":"258","line":25,"column":8,"nodeType":"259","endLine":25,"endColumn":10,"suggestions":"260"},{"ruleId":"249","severity":1,"message":"250","line":1,"column":17,"nodeType":"251","messageId":"252","endLine":1,"endColumn":26},{"ruleId":"249","severity":1,"message":"255","line":8,"column":17,"nodeType":"251","messageId":"252","endLine":8,"endColumn":20},{"ruleId":"249","severity":1,"message":"261","line":1,"column":17,"nodeType":"251","messageId":"252","endLine":1,"endColumn":27},{"ruleId":"249","severity":1,"message":"262","line":8,"column":10,"nodeType":"251","messageId":"252","endLine":8,"endColumn":23},{"ruleId":"249","severity":1,"message":"263","line":9,"column":10,"nodeType":"251","messageId":"252","endLine":9,"endColumn":15},{"ruleId":"249","severity":1,"message":"264","line":9,"column":17,"nodeType":"251","messageId":"252","endLine":9,"endColumn":23},{"ruleId":"249","severity":1,"message":"265","line":9,"column":37,"nodeType":"251","messageId":"252","endLine":9,"endColumn":50},{"ruleId":"249","severity":1,"message":"266","line":11,"column":8,"nodeType":"251","messageId":"252","endLine":11,"endColumn":24},{"ruleId":"267","severity":1,"message":"268","line":38,"column":38,"nodeType":"269","messageId":"270","endLine":38,"endColumn":40},{"ruleId":"267","severity":1,"message":"271","line":43,"column":38,"nodeType":"269","messageId":"270","endLine":43,"endColumn":40},{"ruleId":"267","severity":1,"message":"271","line":48,"column":43,"nodeType":"269","messageId":"270","endLine":48,"endColumn":45},{"ruleId":"267","severity":1,"message":"271","line":50,"column":28,"nodeType":"269","messageId":"270","endLine":50,"endColumn":30},{"ruleId":"257","severity":1,"message":"272","line":103,"column":6,"nodeType":"259","endLine":103,"endColumn":21,"suggestions":"273"},{"ruleId":"267","severity":1,"message":"271","line":117,"column":34,"nodeType":"269","messageId":"270","endLine":117,"endColumn":36},{"ruleId":"257","severity":1,"message":"274","line":32,"column":6,"nodeType":"259","endLine":32,"endColumn":20,"suggestions":"275"},{"ruleId":"267","severity":1,"message":"271","line":34,"column":32,"nodeType":"269","messageId":"270","endLine":34,"endColumn":34},{"ruleId":"249","severity":1,"message":"276","line":1,"column":38,"nodeType":"251","messageId":"252","endLine":1,"endColumn":46},{"ruleId":"249","severity":1,"message":"262","line":8,"column":10,"nodeType":"251","messageId":"252","endLine":8,"endColumn":23},{"ruleId":"249","severity":1,"message":"277","line":12,"column":8,"nodeType":"251","messageId":"252","endLine":12,"endColumn":22},{"ruleId":"257","severity":1,"message":"278","line":35,"column":6,"nodeType":"259","endLine":35,"endColumn":21,"suggestions":"279"},{"ruleId":"267","severity":1,"message":"271","line":38,"column":12,"nodeType":"269","messageId":"270","endLine":38,"endColumn":14},{"ruleId":"249","severity":1,"message":"280","line":18,"column":19,"nodeType":"251","messageId":"252","endLine":18,"endColumn":27},{"ruleId":"249","severity":1,"message":"250","line":1,"column":29,"nodeType":"251","messageId":"252","endLine":1,"endColumn":38},{"ruleId":"249","severity":1,"message":"281","line":5,"column":8,"nodeType":"251","messageId":"252","endLine":5,"endColumn":18},{"ruleId":"249","severity":1,"message":"282","line":10,"column":8,"nodeType":"251","messageId":"252","endLine":10,"endColumn":20},{"ruleId":"249","severity":1,"message":"283","line":15,"column":10,"nodeType":"251","messageId":"252","endLine":15,"endColumn":16},{"ruleId":"249","severity":1,"message":"284","line":15,"column":18,"nodeType":"251","messageId":"252","endLine":15,"endColumn":26},{"ruleId":"249","severity":1,"message":"285","line":15,"column":40,"nodeType":"251","messageId":"252","endLine":15,"endColumn":55},{"ruleId":"249","severity":1,"message":"286","line":17,"column":10,"nodeType":"251","messageId":"252","endLine":17,"endColumn":22},{"ruleId":"249","severity":1,"message":"287","line":17,"column":24,"nodeType":"251","messageId":"252","endLine":17,"endColumn":35},{"ruleId":"288","severity":1,"message":"289","line":28,"column":56,"nodeType":"290","messageId":"291","endLine":28,"endColumn":57,"suggestions":"292"},{"ruleId":"288","severity":1,"message":"289","line":28,"column":64,"nodeType":"290","messageId":"291","endLine":28,"endColumn":65,"suggestions":"293"},{"ruleId":"288","severity":1,"message":"294","line":28,"column":69,"nodeType":"290","messageId":"291","endLine":28,"endColumn":70,"suggestions":"295"},{"ruleId":"288","severity":1,"message":"294","line":28,"column":83,"nodeType":"290","messageId":"291","endLine":28,"endColumn":84,"suggestions":"296"},{"ruleId":"288","severity":1,"message":"294","line":28,"column":86,"nodeType":"290","messageId":"291","endLine":28,"endColumn":87,"suggestions":"297"},{"ruleId":"288","severity":1,"message":"294","line":28,"column":96,"nodeType":"290","messageId":"291","endLine":28,"endColumn":97,"suggestions":"298"},{"ruleId":"249","severity":1,"message":"280","line":54,"column":19,"nodeType":"251","messageId":"252","endLine":54,"endColumn":27},{"ruleId":"249","severity":1,"message":"299","line":55,"column":18,"nodeType":"251","messageId":"252","endLine":55,"endColumn":25},{"ruleId":"249","severity":1,"message":"300","line":110,"column":13,"nodeType":"251","messageId":"252","endLine":110,"endColumn":17},{"ruleId":"249","severity":1,"message":"253","line":1,"column":17,"nodeType":"251","messageId":"252","endLine":1,"endColumn":25},{"ruleId":"249","severity":1,"message":"301","line":3,"column":16,"nodeType":"251","messageId":"252","endLine":3,"endColumn":26},{"ruleId":"249","severity":1,"message":"301","line":5,"column":16,"nodeType":"251","messageId":"252","endLine":5,"endColumn":26},{"ruleId":"249","severity":1,"message":"302","line":6,"column":8,"nodeType":"251","messageId":"252","endLine":6,"endColumn":19},{"ruleId":"267","severity":1,"message":"271","line":15,"column":34,"nodeType":"269","messageId":"270","endLine":15,"endColumn":36},{"ruleId":"249","severity":1,"message":"303","line":11,"column":13,"nodeType":"251","messageId":"252","endLine":11,"endColumn":18},{"ruleId":"267","severity":1,"message":"271","line":79,"column":47,"nodeType":"269","messageId":"270","endLine":79,"endColumn":49},{"ruleId":"267","severity":1,"message":"271","line":99,"column":38,"nodeType":"269","messageId":"270","endLine":99,"endColumn":40},{"ruleId":"267","severity":1,"message":"268","line":155,"column":60,"nodeType":"269","messageId":"270","endLine":155,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":188,"column":49,"nodeType":"269","messageId":"270","endLine":188,"endColumn":51},{"ruleId":"267","severity":1,"message":"268","line":190,"column":59,"nodeType":"269","messageId":"270","endLine":190,"endColumn":61},{"ruleId":"267","severity":1,"message":"271","line":213,"column":35,"nodeType":"269","messageId":"270","endLine":213,"endColumn":37},{"ruleId":"249","severity":1,"message":"304","line":238,"column":7,"nodeType":"251","messageId":"252","endLine":238,"endColumn":19},{"ruleId":"249","severity":1,"message":"305","line":241,"column":9,"nodeType":"251","messageId":"252","endLine":241,"endColumn":19},{"ruleId":"249","severity":1,"message":"250","line":1,"column":17,"nodeType":"251","messageId":"252","endLine":1,"endColumn":26},{"ruleId":"267","severity":1,"message":"271","line":66,"column":91,"nodeType":"269","messageId":"270","endLine":66,"endColumn":93},{"ruleId":"249","severity":1,"message":"306","line":2,"column":8,"nodeType":"251","messageId":"252","endLine":2,"endColumn":17},{"ruleId":"249","severity":1,"message":"250","line":1,"column":17,"nodeType":"251","messageId":"252","endLine":1,"endColumn":26},{"ruleId":"249","severity":1,"message":"253","line":1,"column":28,"nodeType":"251","messageId":"252","endLine":1,"endColumn":36},{"ruleId":"249","severity":1,"message":"280","line":8,"column":17,"nodeType":"251","messageId":"252","endLine":8,"endColumn":25},{"ruleId":"307","severity":1,"message":"308","line":51,"column":18,"nodeType":"309","endLine":51,"endColumn":33},{"ruleId":"249","severity":1,"message":"253","line":1,"column":17,"nodeType":"251","messageId":"252","endLine":1,"endColumn":25},{"ruleId":"267","severity":1,"message":"271","line":14,"column":32,"nodeType":"269","messageId":"270","endLine":14,"endColumn":34},{"ruleId":"267","severity":1,"message":"271","line":15,"column":30,"nodeType":"269","messageId":"270","endLine":15,"endColumn":32},{"ruleId":"267","severity":1,"message":"271","line":16,"column":33,"nodeType":"269","messageId":"270","endLine":16,"endColumn":35},{"ruleId":"249","severity":1,"message":"310","line":19,"column":7,"nodeType":"251","messageId":"252","endLine":19,"endColumn":22},{"ruleId":"249","severity":1,"message":"311","line":20,"column":9,"nodeType":"251","messageId":"252","endLine":20,"endColumn":13},{"ruleId":"249","severity":1,"message":"312","line":21,"column":9,"nodeType":"251","messageId":"252","endLine":21,"endColumn":16},{"ruleId":"249","severity":1,"message":"313","line":22,"column":9,"nodeType":"251","messageId":"252","endLine":22,"endColumn":18},{"ruleId":"249","severity":1,"message":"314","line":23,"column":9,"nodeType":"251","messageId":"252","endLine":23,"endColumn":16},{"ruleId":"249","severity":1,"message":"253","line":2,"column":28,"nodeType":"251","messageId":"252","endLine":2,"endColumn":36},{"ruleId":"267","severity":1,"message":"271","line":15,"column":20,"nodeType":"269","messageId":"270","endLine":15,"endColumn":22},{"ruleId":"249","severity":1,"message":"315","line":24,"column":12,"nodeType":"251","messageId":"252","endLine":24,"endColumn":17},{"ruleId":"249","severity":1,"message":"315","line":37,"column":12,"nodeType":"251","messageId":"252","endLine":37,"endColumn":17},{"ruleId":"257","severity":1,"message":"316","line":43,"column":8,"nodeType":"259","endLine":43,"endColumn":10,"suggestions":"317"},{"ruleId":"249","severity":1,"message":"315","line":72,"column":12,"nodeType":"251","messageId":"252","endLine":72,"endColumn":17},{"ruleId":"267","severity":1,"message":"271","line":120,"column":32,"nodeType":"269","messageId":"270","endLine":120,"endColumn":34},{"ruleId":"267","severity":1,"message":"271","line":156,"column":38,"nodeType":"269","messageId":"270","endLine":156,"endColumn":40},{"ruleId":"267","severity":1,"message":"271","line":184,"column":47,"nodeType":"269","messageId":"270","endLine":184,"endColumn":49},{"ruleId":"318","severity":1,"message":"319","line":194,"column":13,"nodeType":"320","messageId":"321","endLine":209,"endColumn":14},{"ruleId":"249","severity":1,"message":"322","line":2,"column":8,"nodeType":"251","messageId":"252","endLine":2,"endColumn":16},{"ruleId":"249","severity":1,"message":"286","line":4,"column":31,"nodeType":"251","messageId":"252","endLine":4,"endColumn":43},{"ruleId":"249","severity":1,"message":"323","line":7,"column":33,"nodeType":"251","messageId":"252","endLine":7,"endColumn":35},{"ruleId":"249","severity":1,"message":"324","line":7,"column":78,"nodeType":"251","messageId":"252","endLine":7,"endColumn":87},{"ruleId":"249","severity":1,"message":"284","line":13,"column":10,"nodeType":"251","messageId":"252","endLine":13,"endColumn":18},{"ruleId":"249","severity":1,"message":"325","line":13,"column":20,"nodeType":"251","messageId":"252","endLine":13,"endColumn":30},{"ruleId":"257","severity":1,"message":"326","line":36,"column":5,"nodeType":"259","endLine":36,"endColumn":34,"suggestions":"327"},{"ruleId":"318","severity":1,"message":"319","line":41,"column":7,"nodeType":"320","messageId":"321","endLine":52,"endColumn":8},"no-native-reassign",["328"],"no-negated-in-lhs",["329"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Cookies' is defined but never used.","'url' is assigned a value but never used.","'state' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'schoolId'. Either include them or remove the dependency array.","ArrayExpression",["330"],"'useContext' is defined but never used.","'useStateValue' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'useRouteMatch' is defined but never used.","'ScreenClubDetail' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'loadClubs'. Either include it or remove the dependency array.",["331"],"React Hook useEffect has missing dependencies: 'history', 'schoolId', and 'setClub'. Either include them or remove the dependency array.",["332"],"'Suspense' is defined but never used.","'checkURLParams' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'params.schoolId'. Either include them or remove the dependency array.",["333"],"'dispatch' is assigned a value but never used.","'RichEditor' is defined but never used.","'ReactTooltip' is defined but never used.","'Formik' is defined but never used.","'useField' is defined but never used.","'yupToFormErrors' is defined but never used.","'ContentState' is defined but never used.","'EditorState' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["334","335"],["336","337"],"Unnecessary escape character: \\/.",["338","339"],["340","341"],["342","343"],["344","345"],"'setClub' is assigned a value but never used.","'user' is assigned a value but never used.","'useHistory' is defined but never used.","'ReactPlayer' is defined but never used.","'utils' is defined but never used.","'CalendarView' is assigned a value but never used.","'dayzEvents' is assigned a value but never used.","'variables' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'eventToStartEnd' is assigned a value but never used.","'date' is assigned a value but never used.","'endDate' is assigned a value but never used.","'startTime' is assigned a value but never used.","'endTime' is assigned a value but never used.","'field' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setValue' and 'value'. Either include them or remove the dependency array.",["346"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'ReactDOM' is defined but never used.","'fa' is defined but never used.","'faHeading' is defined but never used.","'withFormik' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'editorState'. Either exclude it or remove the dependency array.",["347"],"no-global-assign","no-unsafe-negation",{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"messageId":"356","fix":"357","desc":"358"},{"messageId":"359","fix":"360","desc":"361"},{"messageId":"356","fix":"362","desc":"358"},{"messageId":"359","fix":"363","desc":"361"},{"messageId":"356","fix":"364","desc":"358"},{"messageId":"359","fix":"365","desc":"361"},{"messageId":"356","fix":"366","desc":"358"},{"messageId":"359","fix":"367","desc":"361"},{"messageId":"356","fix":"368","desc":"358"},{"messageId":"359","fix":"369","desc":"361"},{"messageId":"356","fix":"370","desc":"358"},{"messageId":"359","fix":"371","desc":"361"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},"Update the dependencies array to be: [dispatch, schoolId]",{"range":"376","text":"377"},"Update the dependencies array to be: [loadClubs, params.school]",{"range":"378","text":"379"},"Update the dependencies array to be: [clubId, code, history, schoolId, setClub]",{"range":"380","text":"381"},"Update the dependencies array to be: [history, params.clubId, params.schoolId]",{"range":"382","text":"383"},"removeEscape",{"range":"384","text":"385"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"386","text":"387"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"388","text":"385"},{"range":"389","text":"387"},{"range":"390","text":"385"},{"range":"391","text":"387"},{"range":"392","text":"385"},{"range":"393","text":"387"},{"range":"394","text":"385"},{"range":"395","text":"387"},{"range":"396","text":"385"},{"range":"397","text":"387"},"Update the dependencies array to be: [setValue, value]",{"range":"398","text":"399"},"Update the dependencies array to be: [setEditorState]",{"range":"400","text":"401"},[864,866],"[dispatch, schoolId]",[3009,3024],"[loadClubs, params.school]",[1307,1321],"[clubId, code, history, schoolId, setClub]",[1304,1319],"[history, params.clubId, params.schoolId]",[991,992],"",[991,991],"\\",[999,1000],[999,999],[1004,1005],[1004,1004],[1018,1019],[1018,1018],[1021,1022],[1021,1021],[1031,1032],[1031,1031],[1516,1518],"[setValue, value]",[1236,1265],"[setEditorState]"]